
context.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  00000258  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000297  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001a3  00000000  00000000  000005b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000212  00000000  00000000  0000075a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  0000096c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a8  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000096  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00000c46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 30       	cpi	r26, 0x0D	; 13
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  88:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <TASK1>:
 */ 

#include "main.h"
void TASK1()
{
	while(1)asm("ldi r16,0xFC");
  90:	0c ef       	ldi	r16, 0xFC	; 252
  92:	fe cf       	rjmp	.-4      	; 0x90 <TASK1>

00000094 <TASK2>:
}
void TASK2()
{
	while(1)asm("ldi r17,0xCF");
  94:	1f ec       	ldi	r17, 0xCF	; 207
  96:	fe cf       	rjmp	.-4      	; 0x94 <TASK2>

00000098 <main>:
}
int main(void)
{
	
	TASK[0].PID=0;
  98:	e3 e0       	ldi	r30, 0x03	; 3
  9a:	f1 e0       	ldi	r31, 0x01	; 1
  9c:	10 82       	st	Z, r1
	TASK[1].PID=1;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	85 83       	std	Z+5, r24	; 0x05
	TASK[0].pTASK=TASK1;
  a2:	88 e4       	ldi	r24, 0x48	; 72
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	94 83       	std	Z+4, r25	; 0x04
  a8:	83 83       	std	Z+3, r24	; 0x03
	TASK[1].pTASK=TASK2;
  aa:	8a e4       	ldi	r24, 0x4A	; 74
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	91 87       	std	Z+9, r25	; 0x09
  b0:	80 87       	std	Z+8, r24	; 0x08
	OCR1A = 0x0010; 
  b2:	80 e1       	ldi	r24, 0x10	; 16
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  ba:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1B |= (1 << WGM12); 
  be:	a1 e8       	ldi	r26, 0x81	; 129
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	8c 91       	ld	r24, X
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	8c 93       	st	X, r24
	TIMSK1 |= (1 << OCIE1A); 
  c8:	cf e6       	ldi	r28, 0x6F	; 111
  ca:	d0 e0       	ldi	r29, 0x00	; 0
  cc:	88 81       	ld	r24, Y
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	88 83       	st	Y, r24
	TCCR1B |= (1 << CS12) | (1 << CS10);
  d2:	8c 91       	ld	r24, X
  d4:	85 60       	ori	r24, 0x05	; 5
  d6:	8c 93       	st	X, r24
	sei();
  d8:	78 94       	sei
    /* Replace with your application code */
	TASK[0].pTASK();
  da:	03 80       	ldd	r0, Z+3	; 0x03
  dc:	f4 81       	ldd	r31, Z+4	; 0x04
  de:	e0 2d       	mov	r30, r0
  e0:	09 95       	icall
    while (1) 
    {
    }
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <main+0x4a>

000000e4 <__vector_11>:
}
ISR (TIMER1_COMPA_vect) {
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	4f 93       	push	r20
  f2:	5f 93       	push	r21
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
	cli();
  f8:	f8 94       	cli
	pTCB_SWP(count);
  fa:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
	save_switch();
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	1f 92       	push	r1
 106:	2f 92       	push	r2
 108:	3f 92       	push	r3
 10a:	4f 92       	push	r4
 10c:	5f 92       	push	r5
 10e:	6f 92       	push	r6
 110:	7f 92       	push	r7
 112:	8f 92       	push	r8
 114:	9f 92       	push	r9
 116:	af 92       	push	r10
 118:	bf 92       	push	r11
 11a:	cf 92       	push	r12
 11c:	df 92       	push	r13
 11e:	ef 92       	push	r14
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	2f 93       	push	r18
 128:	3f 93       	push	r19
 12a:	4f 93       	push	r20
 12c:	5f 93       	push	r21
 12e:	6f 93       	push	r22
 130:	7f 93       	push	r23
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	af 93       	push	r26
 138:	bf 93       	push	r27
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
 142:	1d b7       	in	r17, 0x3d	; 61
 144:	2e b7       	in	r18, 0x3e	; 62
 146:	10 93 02 01 	sts	0x0102, r17	; 0x800102 <pTCB+0x1>
 14a:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <TASK>
	pTCB_SWP(!count);
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	22 23       	and	r18, r18
 154:	11 f0       	breq	.+4      	; 0x15a <__vector_11+0x76>
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	ac 01       	movw	r20, r24
 15c:	44 0f       	add	r20, r20
 15e:	55 1f       	adc	r21, r21
 160:	44 0f       	add	r20, r20
 162:	55 1f       	adc	r21, r21
 164:	84 0f       	add	r24, r20
 166:	95 1f       	adc	r25, r21
 168:	8d 5f       	subi	r24, 0xFD	; 253
 16a:	9e 4f       	sbci	r25, 0xFE	; 254
 16c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <pTCB+0x1>
 170:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pTCB>
	restore_switch();
 174:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <pTCB+0x1>
 178:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <TASK>
 17c:	1d bf       	out	0x3d, r17	; 61
 17e:	2e bf       	out	0x3e, r18	; 62
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	7f 91       	pop	r23
 192:	6f 91       	pop	r22
 194:	5f 91       	pop	r21
 196:	4f 91       	pop	r20
 198:	3f 91       	pop	r19
 19a:	2f 91       	pop	r18
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	ff 90       	pop	r15
 1a2:	ef 90       	pop	r14
 1a4:	df 90       	pop	r13
 1a6:	cf 90       	pop	r12
 1a8:	bf 90       	pop	r11
 1aa:	af 90       	pop	r10
 1ac:	9f 90       	pop	r9
 1ae:	8f 90       	pop	r8
 1b0:	7f 90       	pop	r7
 1b2:	6f 90       	pop	r6
 1b4:	5f 90       	pop	r5
 1b6:	4f 90       	pop	r4
 1b8:	3f 90       	pop	r3
 1ba:	2f 90       	pop	r2
 1bc:	1f 90       	pop	r1
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
	count++;
 1c4:	2f 5f       	subi	r18, 0xFF	; 255
 1c6:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
	sei();
 1ca:	78 94       	sei
}
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	5f 91       	pop	r21
 1d2:	4f 91       	pop	r20
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
